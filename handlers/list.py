from aiogram.types import Message
from db.models import Note
from db.session import SessionLocal
from sqlalchemy import select, func
from datetime import datetime, timezone, timedelta
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


class ListDaysStaties(StatesGroup):
    waiting_for_days = State()


class ListPageStates(StatesGroup):
    waiting_for_page = State()


async def list_handler(msg: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list.

    Args:
        msg(Message): –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–º–µ—Ç–æ–∫.
    """
    user_id = msg.from_user.id if msg.from_user and msg.from_user.id else None
    if not user_id:
        await msg.answer("–û—à–∏–±–æ—á–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    page_number = 1
    page_size = 5
    offset = (page_number - 1) * page_size

    async with SessionLocal() as session:
        count_result = await session.execute(
            select(func.count()).where(Note.user_id == user_id)
        )
        total_notes = count_result.scalar_one()
        total_pages = (total_notes + page_size - 1) // page_size

        result = await session.execute(
            select(Note)
            .where(Note.user_id == user_id)
            .order_by(Note.created_at.desc())
            .offset(offset)
            .limit(page_size)
        )
        notes = result.scalars().all()
        if not notes:
            await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return
        text = "\n\n".join(
            f"{offset + i + 1}. {note.text}\n({note.formatted_time()})"
            for i, note in enumerate(notes)
        )
        await msg.answer(
            (
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}:\n\n{text}\n\n"
                "–î–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–π /list_page 2 "
                "–∏–ª–∏ –∫–Ω–æ–ø–∫—É üìÑ –ó–∞–º–µ—Ç–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."
            )
        )


async def list_day_handler(msg: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list_day –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–º–µ—Ç–∫–∏ –∑–∞ N –¥–Ω–µ–π.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.
    """
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏.")
    await state.set_state(ListDaysStaties.waiting_for_days)


async def process_list_days(msg: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π,–≤–≤–µ–¥–µ–Ω–æ–µ
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–∞–º–µ—Ç–∫–∏
    """
    if not msg.text or not msg.text.strip().isdigit():
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        return
    day_number = int(msg.text.strip())
    if day_number < 1:
        await msg.answer("–ß–∏—Å–ª–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    user_id = msg.from_user.id if msg.from_user and msg.from_user.id else None
    if not user_id:
        await msg.answer("–û—à–∏–±–æ—á–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return

    now = datetime.now(timezone.utc)
    date_from = now - timedelta(days=day_number)

    async with SessionLocal() as session:
        result = await session.execute(
            select(Note)
            .where(Note.user_id == user_id, Note.created_at >= date_from)
            .order_by(Note.created_at.desc())
        )
        notes = result.scalars().all()
        if not notes:
            await msg.answer("–ó–∞–º–µ—Ç–æ–∫ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        text = "\n\n".join(
            f"{i+1}. {note.text}\n({note.formatted_time()})"
            for i,
            note in enumerate(notes)
        )
        await msg.answer(
            f"–¢–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {day_number} –¥–Ω–µ–π:\n\n{text}\n\n"
            "–î–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π /list"
            "–∏–ª–∏ –∫–Ω–æ–ø–∫—É üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫."
        )
    await state.clear()


async def list_page_handler(msg: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list_page.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—ã–≤–æ–¥–∞: ")
    await state.set_state(ListPageStates.waiting_for_page)


async def process_list_page(msg: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤–≤–µ–¥–µ–Ω–Ω—ã–π
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–∞–º–µ—Ç–∫–∏
    """
    if not msg.text or not msg.text.strip().isdigit():
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return
    page_number = int(msg.text.strip())
    page_size = 5
    offset = (page_number - 1) * page_size
    user_id = msg.from_user.id if msg.from_user and msg.from_user.id else None
    if not user_id:
        await msg.answer("–û—à–∏–±–æ—á–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return

    async with SessionLocal() as session:
        count_result = await session.execute(
            select(func.count()).where(Note.user_id == user_id)
        )

        total_notes = count_result.scalar_one()
        total_pages = (total_notes + page_size - 1) // page_size

        if page_number < 1 or page_number > max(
            total_pages, 1
        ):
            await msg.answer(
                "–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç. –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}"
                )
            await state.clear()
            return

        result = await session.execute(
            select(Note)
            .where(Note.user_id == user_id)
            .order_by(Note.created_at.desc())
            .offset(offset)
            .limit(page_size)
        )
        notes = result.scalars().all()
        if not notes:
            await msg.answer("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.")
            await state.clear()
            return
        text = "\n\n".join(
            f"{offset + i + 1}. {note.text}\n({note.formatted_time()})"
            for i,
            note in enumerate(notes)
        )
        await msg.answer(
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number} –∏–∑ {total_pages}:\n\n{text}\n\n"
            "–î–ª—è –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–π /list_page N"
            "–∏–ª–∏ –∫–Ω–æ–ø–∫—É üìÑ –ó–∞–º–µ—Ç–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."
        )
    await state.clear()
